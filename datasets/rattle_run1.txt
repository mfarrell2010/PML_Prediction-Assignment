# Rattle is Copyright (c) 2006-2015 Togaware Pty Ltd.

#============================================================
# Rattle timestamp: 2016-01-30 15:50:37 x86_64-w64-mingw32 

# Rattle version 4.0.0 user 'VM'

# This log file captures all Rattle interactions as R commands. 

Export this log to a file using the Export button or the Tools 
# menu to save a log of all your activity. This facilitates repeatability. For example, exporting 
# to a file called 'myrf01.R' will allow you to type in the R Console 
# the command source('myrf01.R') and so repeat all actions automatically. 
# Generally, you will want to edit the file to suit your needs. You can also directly 
# edit this current log in place to record additional information before exporting. 
 
# Saving and loading projects also retains this log.

# We begin by loading the required libraries.

library(rattle)   # To access the weather dataset and utility commands.
library(magrittr) # For the %>% and %<>% operators.

# This log generally records the process of building a model. However, with very 
# little effort the log can be used to score a new dataset. The logical variable 
# 'building' is used to toggle between generating transformations, as when building 
# a model, and simply using the transformations, as when scoring a dataset.

building <- TRUE
scoring  <- ! building


# A pre-defined value is used to reset the random seed so that results are repeatable.

crv$seed <- 42 

#============================================================
# Rattle timestamp: 2016-01-30 15:50:59 x86_64-w64-mingw32 

# Load the data.

crs$dataset <- read.csv("file:///C:/code/r/weight_lifting/pml-training.csv", na.strings=c(".", "NA", "", "?"), strip.white=TRUE, encoding="UTF-8")

#============================================================
# Rattle timestamp: 2016-01-30 15:51:05 x86_64-w64-mingw32 

# Note the user selections. 

# Build the training/validate/test datasets.

set.seed(crv$seed) 
crs$nobs <- nrow(crs$dataset) # 19622 observations 
crs$sample <- crs$train <- sample(nrow(crs$dataset), 0.7*crs$nobs) # 13735 observations
crs$validate <- sample(setdiff(seq_len(nrow(crs$dataset)), crs$train), 0.15*crs$nobs) # 2943 observations
crs$test <- setdiff(setdiff(seq_len(nrow(crs$dataset)), crs$train), crs$validate) # 2944 observations

# The following variable selections have been noted.

crs$input <- c("user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp",
     "new_window", "num_window", "roll_belt", "pitch_belt",
     "yaw_belt", "total_accel_belt", "kurtosis_roll_belt", "kurtosis_picth_belt",
     "skewness_roll_belt", "skewness_roll_belt.1", "max_roll_belt", "max_picth_belt",
     "max_yaw_belt", "min_roll_belt", "min_pitch_belt", "min_yaw_belt",
     "amplitude_roll_belt", "amplitude_pitch_belt", "amplitude_yaw_belt", "var_total_accel_belt",
     "avg_roll_belt", "stddev_roll_belt", "var_roll_belt", "avg_pitch_belt",
     "stddev_pitch_belt", "var_pitch_belt", "avg_yaw_belt", "stddev_yaw_belt",
     "var_yaw_belt", "gyros_belt_x", "gyros_belt_y", "gyros_belt_z",
     "accel_belt_x", "accel_belt_y", "accel_belt_z", "magnet_belt_x",
     "magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm",
     "yaw_arm", "total_accel_arm", "var_accel_arm", "avg_roll_arm",
     "stddev_roll_arm", "var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm",
     "var_pitch_arm", "avg_yaw_arm", "stddev_yaw_arm", "var_yaw_arm",
     "gyros_arm_x", "gyros_arm_y", "gyros_arm_z", "accel_arm_x",
     "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y",
     "magnet_arm_z", "kurtosis_roll_arm", "kurtosis_picth_arm", "kurtosis_yaw_arm",
     "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm", "max_roll_arm",
     "max_picth_arm", "max_yaw_arm", "min_roll_arm", "min_pitch_arm",
     "min_yaw_arm", "amplitude_roll_arm", "amplitude_pitch_arm", "amplitude_yaw_arm",
     "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "kurtosis_roll_dumbbell",
     "kurtosis_picth_dumbbell", "skewness_roll_dumbbell", "skewness_pitch_dumbbell", "max_roll_dumbbell",
     "max_picth_dumbbell", "max_yaw_dumbbell", "min_roll_dumbbell", "min_pitch_dumbbell",
     "min_yaw_dumbbell", "amplitude_roll_dumbbell", "amplitude_pitch_dumbbell", "amplitude_yaw_dumbbell",
     "total_accel_dumbbell", "var_accel_dumbbell", "avg_roll_dumbbell", "stddev_roll_dumbbell",
     "var_roll_dumbbell", "avg_pitch_dumbbell", "stddev_pitch_dumbbell", "var_pitch_dumbbell",
     "avg_yaw_dumbbell", "stddev_yaw_dumbbell", "var_yaw_dumbbell", "gyros_dumbbell_x",
     "gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x", "accel_dumbbell_y",
     "accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y", "magnet_dumbbell_z",
     "roll_forearm", "pitch_forearm", "yaw_forearm", "kurtosis_roll_forearm",
     "kurtosis_picth_forearm", "skewness_roll_forearm", "skewness_pitch_forearm", "max_roll_forearm",
     "max_picth_forearm", "max_yaw_forearm", "min_roll_forearm", "min_pitch_forearm",
     "min_yaw_forearm", "amplitude_roll_forearm", "amplitude_pitch_forearm", "amplitude_yaw_forearm",
     "total_accel_forearm", "var_accel_forearm", "avg_roll_forearm", "stddev_roll_forearm",
     "var_roll_forearm", "avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm",
     "avg_yaw_forearm", "stddev_yaw_forearm", "var_yaw_forearm", "gyros_forearm_x",
     "gyros_forearm_y", "gyros_forearm_z", "accel_forearm_x", "accel_forearm_y",
     "accel_forearm_z", "magnet_forearm_x", "magnet_forearm_y", "magnet_forearm_z")

crs$numeric <- c("raw_timestamp_part_1", "raw_timestamp_part_2", "num_window", "roll_belt",
     "pitch_belt", "yaw_belt", "total_accel_belt", "max_roll_belt",
     "max_picth_belt", "min_roll_belt", "min_pitch_belt", "amplitude_roll_belt",
     "amplitude_pitch_belt", "var_total_accel_belt", "avg_roll_belt", "stddev_roll_belt",
     "var_roll_belt", "avg_pitch_belt", "stddev_pitch_belt", "var_pitch_belt",
     "avg_yaw_belt", "stddev_yaw_belt", "var_yaw_belt", "gyros_belt_x",
     "gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y",
     "accel_belt_z", "magnet_belt_x", "magnet_belt_y", "magnet_belt_z",
     "roll_arm", "pitch_arm", "yaw_arm", "total_accel_arm",
     "var_accel_arm", "avg_roll_arm", "stddev_roll_arm", "var_roll_arm",
     "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
     "stddev_yaw_arm", "var_yaw_arm", "gyros_arm_x", "gyros_arm_y",
     "gyros_arm_z", "accel_arm_x", "accel_arm_y", "accel_arm_z",
     "magnet_arm_x", "magnet_arm_y", "magnet_arm_z", "max_roll_arm",
     "max_picth_arm", "max_yaw_arm", "min_roll_arm", "min_pitch_arm",
     "min_yaw_arm", "amplitude_roll_arm", "amplitude_pitch_arm", "amplitude_yaw_arm",
     "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "max_roll_dumbbell",
     "max_picth_dumbbell", "min_roll_dumbbell", "min_pitch_dumbbell", "amplitude_roll_dumbbell",
     "amplitude_pitch_dumbbell", "total_accel_dumbbell", "var_accel_dumbbell", "avg_roll_dumbbell",
     "stddev_roll_dumbbell", "var_roll_dumbbell", "avg_pitch_dumbbell", "stddev_pitch_dumbbell",
     "var_pitch_dumbbell", "avg_yaw_dumbbell", "stddev_yaw_dumbbell", "var_yaw_dumbbell",
     "gyros_dumbbell_x", "gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x",
     "accel_dumbbell_y", "accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y",
     "magnet_dumbbell_z", "roll_forearm", "pitch_forearm", "yaw_forearm",
     "max_roll_forearm", "max_picth_forearm", "min_roll_forearm", "min_pitch_forearm",
     "amplitude_roll_forearm", "amplitude_pitch_forearm", "total_accel_forearm", "var_accel_forearm",
     "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm", "avg_pitch_forearm",
     "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm", "stddev_yaw_forearm",
     "var_yaw_forearm", "gyros_forearm_x", "gyros_forearm_y", "gyros_forearm_z",
     "accel_forearm_x", "accel_forearm_y", "accel_forearm_z", "magnet_forearm_x",
     "magnet_forearm_y", "magnet_forearm_z")

crs$categoric <- c("user_name", "cvtd_timestamp", "new_window", "kurtosis_roll_belt",
     "kurtosis_picth_belt", "skewness_roll_belt", "skewness_roll_belt.1", "max_yaw_belt",
     "min_yaw_belt", "amplitude_yaw_belt", "kurtosis_roll_arm", "kurtosis_picth_arm",
     "kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
     "kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "skewness_roll_dumbbell", "skewness_pitch_dumbbell",
     "max_yaw_dumbbell", "min_yaw_dumbbell", "amplitude_yaw_dumbbell", "kurtosis_roll_forearm",
     "kurtosis_picth_forearm", "skewness_roll_forearm", "skewness_pitch_forearm", "max_yaw_forearm",
     "min_yaw_forearm", "amplitude_yaw_forearm")

crs$target  <- "classe"
crs$risk    <- NULL
crs$ident   <- "X"
crs$ignore  <- c("kurtosis_yaw_belt", "skewness_yaw_belt", "kurtosis_yaw_dumbbell", "skewness_yaw_dumbbell", "kurtosis_yaw_forearm", "skewness_yaw_forearm")
crs$weights <- NULL

#============================================================
# Rattle timestamp: 2016-01-30 15:51:49 x86_64-w64-mingw32 

# The 'Hmisc' package provides the 'contents' function.

library(Hmisc, quietly=TRUE)

# Obtain a summary of the dataset.

contents(crs$dataset[crs$sample, c(crs$input, crs$risk, crs$target)])
summary(crs$dataset[crs$sample, c(crs$input, crs$risk, crs$target)])

# The 'Hmisc' package provides the 'describe' function.

library(Hmisc, quietly=TRUE)

# Generate a description of the dataset.

describe(crs$dataset[crs$sample, c(crs$input, crs$risk, crs$target)])

#============================================================
# Rattle timestamp: 2016-01-30 15:54:16 x86_64-w64-mingw32 

# The 'md.pattern' package provides the 'mice' function.

library(mice, quietly=TRUE)

# Generate a summary of the missing values in the dataset.

md.pattern(crs$dataset[,c(crs$input, crs$target)])

#============================================================
# Rattle timestamp: 2016-01-30 16:01:01 x86_64-w64-mingw32 

# Principal Components Analysis (on numerics only).

pc <- prcomp(na.omit(crs$dataset[crs$sample, crs$numeric]), scale=TRUE, center=TRUE, tol=0)

# Show the output of the analysis.

pc

# Summarise the importance of the components found.

summary(pc)

# Display a plot showing the relative importance of the components.

plot(pc, main="")
title(main="Principal Components Importance pml-training.csv",
    sub=paste("Rattle", format(Sys.time(), "%Y-%b-%d %H:%M:%S"), Sys.info()["user"]))
axis(1, at=seq(0.7, ncol(pc$rotation)*1.2, 1.2), labels=colnames(pc$rotation), lty=0)

# Display a plot showing the two most principal components.

biplot(pc, main="")
title(main="Principal Components pml-training.csv",
    sub=paste("Rattle", format(Sys.time(), "%Y-%b-%d %H:%M:%S"), Sys.info()["user"]))

#============================================================
# Rattle timestamp: 2016-01-30 18:08:32 x86_64-w64-mingw32 

# Load the data.

crs$dataset <- read.csv("file:///C:/code/r/weight_lifting/pml_red_training.csv", na.strings=c(".", "NA", "", "?"), strip.white=TRUE, encoding="UTF-8")

#============================================================
# Rattle timestamp: 2016-01-30 18:08:34 x86_64-w64-mingw32 

# Note the user selections. 

# Build the training/validate/test datasets.

set.seed(crv$seed) 
crs$nobs <- nrow(crs$dataset) # 19622 observations 
crs$sample <- crs$train <- sample(nrow(crs$dataset), 0.7*crs$nobs) # 13735 observations
crs$validate <- sample(setdiff(seq_len(nrow(crs$dataset)), crs$train), 0.15*crs$nobs) # 2943 observations
crs$test <- setdiff(setdiff(seq_len(nrow(crs$dataset)), crs$train), crs$validate) # 2944 observations

# The following variable selections have been noted.

crs$input <- c("gyros_belt_x", "gyros_belt_y", "gyros_belt_z", "magnet_belt_x",
     "magnet_belt_y", "roll_arm", "pitch_arm", "yaw_arm",
     "total_accel_arm", "gyros_arm_y", "gyros_arm_z", "magnet_arm_x",
     "magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell",
     "total_accel_dumbbell", "gyros_dumbbell_y", "magnet_dumbbell_z", "roll_forearm",
     "pitch_forearm", "yaw_forearm", "total_accel_forearm", "gyros_forearm_x",
     "gyros_forearm_y", "accel_forearm_x", "accel_forearm_z", "magnet_forearm_x",
     "magnet_forearm_y", "magnet_forearm_z")

crs$numeric <- c("gyros_belt_x", "gyros_belt_y", "gyros_belt_z", "magnet_belt_x",
     "magnet_belt_y", "roll_arm", "pitch_arm", "yaw_arm",
     "total_accel_arm", "gyros_arm_y", "gyros_arm_z", "magnet_arm_x",
     "magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell",
     "total_accel_dumbbell", "gyros_dumbbell_y", "magnet_dumbbell_z", "roll_forearm",
     "pitch_forearm", "yaw_forearm", "total_accel_forearm", "gyros_forearm_x",
     "gyros_forearm_y", "accel_forearm_x", "accel_forearm_z", "magnet_forearm_x",
     "magnet_forearm_y", "magnet_forearm_z")

crs$categoric <- NULL

crs$target  <- "classe"
crs$risk    <- NULL
crs$ident   <- "X"
crs$ignore  <- NULL
crs$weights <- NULL

#============================================================
# Rattle timestamp: 2016-01-30 18:09:19 x86_64-w64-mingw32 

# Random Forest 

# The 'randomForest' package provides the 'randomForest' function.

library(randomForest, quietly=TRUE)

# Build the Random Forest model.

set.seed(crv$seed)
crs$rf <- randomForest::randomForest(classe ~ .,
      data=crs$dataset[crs$sample,c(crs$input, crs$target)], 
      ntree=500,
      mtry=5,
      importance=TRUE,
      na.action=randomForest::na.roughfix,
      replace=FALSE)

# Generate textual output of 'Random Forest' model.

crs$rf

# List the importance of the variables.

rn <- round(randomForest::importance(crs$rf), 2)
rn[order(rn[,3], decreasing=TRUE),]

# Time taken: 1.27 mins

#============================================================
# Rattle timestamp: 2016-01-30 18:14:40 x86_64-w64-mingw32 

# Plot the relative importance of the variables.

randomForest::varImpPlot(crs$rf, main="")
title(main="Variable Importance Random Forest pml_red_training.csv",
    sub=paste("Rattle", format(Sys.time(), "%Y-%b-%d %H:%M:%S"), Sys.info()["user"]))

# Display tree number 1.

printRandomForests(crs$rf, 1)

# Plot the error rate against the number of trees.

plot(crs$rf, main="")
legend("topright", c("OOB", "A", "B", "C", "D", "E"), text.col=1:6, lty=1:3, col=1:3)
title(main="Error Rates Random Forest pml_red_training.csv",
    sub=paste("Rattle", format(Sys.time(), "%Y-%b-%d %H:%M:%S"), Sys.info()["user"]))

# Plot the OOB ROC curve.

library(verification)
aucc <- verification::roc.area(as.integer(as.factor(crs$dataset[crs$sample, crs$target]))-1,
                 crs$rf$votes[,2])$A
verification::roc.plot(as.integer(as.factor(crs$dataset[crs$sample, crs$target]))-1,
         crs$rf$votes[,2], main="")
legend("bottomright", bty="n",
       sprintf("Area Under the Curve (AUC) = %1.3f", aucc))
title(main="OOB ROC Curve Random Forest pml_red_training.csv",
    sub=paste("Rattle", format(Sys.time(), "%Y-%b-%d %H:%M:%S"), Sys.info()["user"]))

#============================================================
# Rattle timestamp: 2016-01-30 18:17:10 x86_64-w64-mingw32 

# Decision Tree 

# The 'rpart' package provides the 'rpart' function.

library(rpart, quietly=TRUE)

# Reset the random number seed to obtain the same results each time.

set.seed(crv$seed)

# Build the Decision Tree model.

crs$rpart <- rpart(classe ~ .,
    data=crs$dataset[crs$train, c(crs$input, crs$target)],
    method="class",
    parms=list(split="information"),
    control=rpart.control(usesurrogate=0, 
        maxsurrogate=0))

# Generate a textual view of the Decision Tree model.

print(crs$rpart)
printcp(crs$rpart)
cat("\n")

# Time taken: 7.20 secs

#============================================================
# Rattle timestamp: 2016-01-30 18:18:30 x86_64-w64-mingw32 

# Support vector machine. 

# The 'kernlab' package provides the 'ksvm' function.

library(kernlab, quietly=TRUE)

# Build a Support Vector Machine model.

set.seed(crv$seed)
crs$ksvm <- ksvm(as.factor(classe) ~ .,
      data=crs$dataset[crs$train,c(crs$input, crs$target)],
      kernel="rbfdot",
      prob.model=TRUE)

# Generate a textual view of the SVM model.

crs$ksvm

# Time taken: 1.08 mins

#============================================================
# Rattle timestamp: 2016-01-30 18:24:21 x86_64-w64-mingw32 

# Evaluate model performance. 

# Generate an Error Matrix for the Decision Tree model.

# Obtain the response from the Decision Tree model.

crs$pr <- predict(crs$rpart, newdata=crs$dataset[crs$validate, c(crs$input, crs$target)], type="class")

# Generate the confusion matrix showing counts.

table(crs$dataset[crs$validate, c(crs$input, crs$target)]$classe, crs$pr,
        dnn=c("Actual", "Predicted"))

# Generate the confusion matrix showing proportions.

pcme <- function(actual, cl)
{
  x <- table(actual, cl)
  nc <- nrow(x)
  tbl <- cbind(x/length(actual),
               Error=sapply(1:nc,
                 function(r) round(sum(x[r,-r])/sum(x[r,]), 2)))
  names(attr(tbl, "dimnames")) <- c("Actual", "Predicted")
  return(tbl)
}
per <- pcme(crs$dataset[crs$validate, c(crs$input, crs$target)]$classe, crs$pr)
round(per, 2)

# Calculate the overall error percentage.

cat(round(sum(per[,"Error"], na.rm=TRUE), 2))

# Calculate the averaged class error percentage.

cat(round(mean(per[,"Error"], na.rm=TRUE), 2))

# Generate an Error Matrix for the SVM model.

# Obtain the response from the SVM model.

crs$pr <- kernlab::predict(crs$ksvm, newdata=na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)]))

# Generate the confusion matrix showing counts.

table(na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)])$classe, crs$pr,
        dnn=c("Actual", "Predicted"))

# Generate the confusion matrix showing proportions.

pcme <- function(actual, cl)
{
  x <- table(actual, cl)
  nc <- nrow(x)
  tbl <- cbind(x/length(actual),
               Error=sapply(1:nc,
                 function(r) round(sum(x[r,-r])/sum(x[r,]), 2)))
  names(attr(tbl, "dimnames")) <- c("Actual", "Predicted")
  return(tbl)
}
per <- pcme(na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)])$classe, crs$pr)
round(per, 2)

# Calculate the overall error percentage.

cat(round(sum(per[,"Error"], na.rm=TRUE), 2))

# Calculate the averaged class error percentage.

cat(round(mean(per[,"Error"], na.rm=TRUE), 2))

#============================================================
# Rattle timestamp: 2016-01-30 18:25:41 x86_64-w64-mingw32 

# Evaluate model performance. 

# Generate an Error Matrix for the Decision Tree model.

# Obtain the response from the Decision Tree model.

crs$pr <- predict(crs$rpart, newdata=crs$dataset[crs$test, c(crs$input, crs$target)], type="class")

# Generate the confusion matrix showing counts.

table(crs$dataset[crs$test, c(crs$input, crs$target)]$classe, crs$pr,
        dnn=c("Actual", "Predicted"))

# Generate the confusion matrix showing proportions.

pcme <- function(actual, cl)
{
  x <- table(actual, cl)
  nc <- nrow(x)
  tbl <- cbind(x/length(actual),
               Error=sapply(1:nc,
                 function(r) round(sum(x[r,-r])/sum(x[r,]), 2)))
  names(attr(tbl, "dimnames")) <- c("Actual", "Predicted")
  return(tbl)
}
per <- pcme(crs$dataset[crs$test, c(crs$input, crs$target)]$classe, crs$pr)
round(per, 2)

# Calculate the overall error percentage.

cat(round(sum(per[,"Error"], na.rm=TRUE), 2))

# Calculate the averaged class error percentage.

cat(round(mean(per[,"Error"], na.rm=TRUE), 2))

# Generate an Error Matrix for the SVM model.

# Obtain the response from the SVM model.

crs$pr <- kernlab::predict(crs$ksvm, newdata=na.omit(crs$dataset[crs$test, c(crs$input, crs$target)]))

# Generate the confusion matrix showing counts.

table(na.omit(crs$dataset[crs$test, c(crs$input, crs$target)])$classe, crs$pr,
        dnn=c("Actual", "Predicted"))

# Generate the confusion matrix showing proportions.

pcme <- function(actual, cl)
{
  x <- table(actual, cl)
  nc <- nrow(x)
  tbl <- cbind(x/length(actual),
               Error=sapply(1:nc,
                 function(r) round(sum(x[r,-r])/sum(x[r,]), 2)))
  names(attr(tbl, "dimnames")) <- c("Actual", "Predicted")
  return(tbl)
}
per <- pcme(na.omit(crs$dataset[crs$test, c(crs$input, crs$target)])$classe, crs$pr)
round(per, 2)

# Calculate the overall error percentage.

cat(round(sum(per[,"Error"], na.rm=TRUE), 2))

# Calculate the averaged class error percentage.

cat(round(mean(per[,"Error"], na.rm=TRUE), 2))